/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthType: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Mutation: {};
  Product: { // root type
    available: boolean; // Boolean!
    creatorId: number; // Int!
    description: string; // String!
    id: number; // Int!
    name: string; // String!
    price: number; // Float!
  }
  Query: {};
  User: { // root type
    email: string; // String!
    id: number; // Int!
    password: string; // String!
    username: string; // String!
  }
  Wishlist: { // root type
    id: number; // Int!
    product: NexusGenRootTypes['Product']; // Product!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthType: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Mutation: { // field return type
    addToWishlist: NexusGenRootTypes['Wishlist']; // Wishlist!
    createProduct: NexusGenRootTypes['Product']; // Product!
    login: NexusGenRootTypes['AuthType']; // AuthType!
    register: NexusGenRootTypes['AuthType']; // AuthType!
  }
  Product: { // field return type
    available: boolean; // Boolean!
    createdBy: NexusGenRootTypes['User'] | null; // User
    creatorId: number; // Int!
    description: string; // String!
    id: number; // Int!
    name: string; // String!
    price: number; // Float!
  }
  Query: { // field return type
    Wishlist: NexusGenRootTypes['Wishlist'][]; // [Wishlist!]!
    products: NexusGenRootTypes['Product'][]; // [Product!]!
  }
  User: { // field return type
    email: string; // String!
    id: number; // Int!
    password: string; // String!
    username: string; // String!
  }
  Wishlist: { // field return type
    id: number; // Int!
    product: NexusGenRootTypes['Product']; // Product!
  }
}

export interface NexusGenFieldTypeNames {
  AuthType: { // field return type name
    token: 'String'
    user: 'User'
  }
  Mutation: { // field return type name
    addToWishlist: 'Wishlist'
    createProduct: 'Product'
    login: 'AuthType'
    register: 'AuthType'
  }
  Product: { // field return type name
    available: 'Boolean'
    createdBy: 'User'
    creatorId: 'Int'
    description: 'String'
    id: 'Int'
    name: 'String'
    price: 'Float'
  }
  Query: { // field return type name
    Wishlist: 'Wishlist'
    products: 'Product'
  }
  User: { // field return type name
    email: 'String'
    id: 'Int'
    password: 'String'
    username: 'String'
  }
  Wishlist: { // field return type name
    id: 'Int'
    product: 'Product'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addToWishlist: { // args
      productId: number; // Int!
    }
    createProduct: { // args
      available: boolean; // Boolean!
      description: string; // String!
      name: string; // String!
      price: number; // Float!
    }
    login: { // args
      password: string; // String!
      username: string; // String!
    }
    register: { // args
      email: string; // String!
      password: string; // String!
      username: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}